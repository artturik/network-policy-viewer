!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["network-policy-viewer"]=t():e["network-policy-viewer"]=t()}(self,(function(){return(()=>{"use strict";var e={n:t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{NetworkPolicyViewer:()=>mn});const n=require("react");var o=e.n(n);const r=require("react-hint");var a=e.n(r);const s=require("@emotion/styled");var i=e.n(s);const l=i().div`
    position: absolute;
    height: fit-content;
    left: 25%;
    top: 10%;
    color: #721c24;
    background-color: #f8d7da;
    border-color: #f5c6cb;
    padding: .75rem 1.25rem;
    border: 1px solid transparent;
    border-radius: .25rem;
    z-index: 1000;
`;function c({text:e}){return e?o().createElement(l,null,e):null}const d=require("dagre"),u=require("js-yaml"),m=require("uuid");class p{id;source;sourceNodeId;target;targetNodeId;constructor(e,t,n){this.source=`${e.getNode().id}__${e.id}`,this.sourceNodeId=e.getNode().id,this.target=`${t.getNode().id}__${t.id}`,this.targetNodeId=t.getNode().id,n||(n="e"+(0,m.v4)()),this.id=n}}var g;!function(e){e.SOURCE="source",e.TARGET="target"}(g||(g={}));class f{id;uid;type;name;deny;node;constructor(e,t,n){this.name=e,this.type=t,n||(n="p"+(0,m.v4)()),this.id=n,this.uid=n,this.deny=!1}setNode(e){this.node=e}getNode(){return this.node}}class h extends f{constructor(e,t){super(e,g.TARGET,t)}}class y{id;data={isPartOfNetworkPolicy:!1,isPodTarget:!0,name:"",ports:[],podSelector:[],namespaceSelector:[],matchingPods:[]};position;constructor(e,t){this.data.name=e,t||(t="n"+(0,m.v4)()),this.id=t}setPosition(e,t){this.position={x:e,y:t}}addPort(e){return e.setNode(this),this.data.ports.push(e),e}getPortWithName(e){return this.data.ports.find((t=>t.name===e))}setPorts(e){this.data.ports=[],e.forEach((e=>{e.setNode(this),this.data.ports.push(e)}))}setName(e){this.data.name=e}getPorts(){return this.data.ports}}class w extends f{constructor(e,t){super(e,g.SOURCE,t)}}class E{name;generateName;namespace;selfLink;uid;resourceVersion;generation;creationTimestamp;deletionTimestamp;deletionGracePeriodSeconds;labels;annotations;ownerReferences;finalizers;clusterName;managedFields;static createFrom(e={}){return new E(e)}constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.name=e.name,this.generateName=e.generateName,this.namespace=e.namespace,this.selfLink=e.selfLink,this.uid=e.uid,this.resourceVersion=e.resourceVersion,this.generation=e.generation,this.deletionGracePeriodSeconds=e.deletionGracePeriodSeconds,this.labels=e.labels,this.annotations=e.annotations,this.finalizers=e.finalizers,this.clusterName=e.clusterName}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}class b{ports;to;static createFrom(e={}){return new b(e)}constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.ports=this.convertValues(e.ports,_),this.to=this.convertValues(e.to,S)}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}class v{cidr;except;static createFrom(e={}){return new v(e)}constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.cidr=e.cidr,this.except=e.except}}class S{podSelector;namespaceSelector;ipBlock;static createFrom(e={}){return new S(e)}constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.podSelector=this.convertValues(e.podSelector,P),this.namespaceSelector=this.convertValues(e.namespaceSelector,P),this.ipBlock=this.convertValues(e.ipBlock,v)}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}class x{static createFrom(e={}){return new x(e)}constructor(e={}){"string"==typeof e&&(e=JSON.parse(e))}}class _{protocol;port;static createFrom(e={}){return new _(e)}constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.protocol=e.protocol||"TCP",this.port=this.convertValues(e.port,x)}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}class N{ports;from;static createFrom(e={}){return new N(e)}constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.ports=this.convertValues(e.ports,_),this.from=this.convertValues(e.from,S)}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}class C{key;operator;values;static createFrom(e={}){return new C(e)}constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.key=e.key,this.operator=e.operator,this.values=e.values}}class P{matchLabels;matchExpressions;static createFrom(e={}){return new P(e)}constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.matchLabels=e.matchLabels,this.matchExpressions=this.convertValues(e.matchExpressions,C)}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}class M{podSelector;ingress;egress;policyTypes;static createFrom(e={}){return new M(e)}constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.podSelector=this.convertValues(e.podSelector,P),this.ingress=this.convertValues(e.ingress,N),this.egress=this.convertValues(e.egress,b),this.policyTypes=e.policyTypes}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}class ${kind;apiVersion;metadata;ownerReferences;managedFields;spec;static createFrom(e={}){return new $(e)}constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.kind=e.kind,this.apiVersion=e.apiVersion,this.metadata=this.convertValues(e.metadata,E),this.spec=this.convertValues(e.spec,M)}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}function k(e,t){const n=[];return e.forEach((e=>{try{n.push(new t(JSON.stringify(u.load(e,{}))))}catch(e){console.error(e)}})),n}function B(e){return e.metadata.namespace||"default"}function T(e,t){let n;const o=new y("");if(e.ipBlock)n=`IPs - ${e.ipBlock.cidr}`,e.ipBlock.except&&0!==e.ipBlock.except.length&&(n+=`, except ${e.ipBlock.except.join(", ")}`),o.data.isPodTarget=!1;else{n="Pods ";const r=[];o.data.podSelector=["*"],o.data.namespaceSelector=[t];const a=I(e.podSelector);a&&0!==a.length?(r.push(`with label ${a.join(", ")}`),o.data.podSelector=a):void 0!==e.podSelector&&(n="All pods ");const s=I(e.namespaceSelector);s&&0!==s.length?(r.push(`in namespace with labels ${s.join(", ")}`),o.data.namespaceSelector=s):void 0!==e.namespaceSelector?(r.push("in any namespace"),o.data.namespaceSelector=["*"]):r.push(`in namespace - ${t}`),r.length>0&&(n+=r.join(" "))}return o.setName(n),o}function O(e,t,n){const o=function(e){const t=[],n=e.spec.policyTypes?e.spec.policyTypes:["Ingress"],o=B(e),r=I(e.spec.podSelector);let a=new y(`All pods in namespace - ${o}`);return a.data.namespaceSelector=[o],a.data.podSelector=["*"],r&&(a.setName(`Pods with label - ${r.join(" ")} in namespace - ${o}`),a.data.podSelector=r),a.data.isPartOfNetworkPolicy=!0,t.push(a),n.includes("Ingress")&&t.push(...function(e,t,n){const o=[];if(e||(e=[]),0===e.length){const e=new h("Any In");e.deny=!0,t.addPort(e)}for(const r of e){if(!r.ports&&!r.from){const e=new y("ALLOW FROM ALL"),n=e.addPort(new w("Out")),o=new h("Any In");return t.setPorts([o]),[e,new p(n,o)]}const e=[];if(r.ports)r.ports.forEach((n=>{const o=`:${n.port} ${n.protocol}`;let r=t.getPortWithName(o);r||(r=new h(o),t.addPort(r)),e.push(r)}));else{const n="Any In";let o=t.getPortWithName(n);o||(o=new h(n),t.addPort(o)),e.push(o)}const a=[],s=[];r.from.forEach((e=>{const t=T(e,n);s.push(t.addPort(new w("Out"))),a.push(t)}));const i=[];s.forEach((t=>{e.forEach((e=>{i.push(new p(t,e))}))})),o.push(...a,...i)}return o}(e.spec.ingress,a,o)),n.includes("Egress")&&t.push(...function(e,t,n,o){const r=[];let a=t.getPortWithName("Out");a||(a=new w("Out"),t.addPort(a)),e||(e=[]),0===e.length&&(a.deny=!0);for(const t of e){const e=[];if(!t.to){const t=new y("ALLOW TO ALL");e.push(t)}let n=[];t.ports?t.ports.forEach((e=>{const t=`:${e.port} ${e.protocol}`;n.push(t)})):n.push("Any In"),t.to?.forEach((t=>{const n=T(t,o);e.push(n)}));const s=[];e.forEach((e=>{n.forEach(((t,n)=>{let o=e.getPortWithName(t);o||(o=new h(t),e.addPort(o)),s.push(o)}))}));const i=[];s.forEach((e=>{i.push(new p(a,e))})),r.push(...e,...i)}return r}(e.spec.egress,a,0,o)),t}(e);return function(e,t,n){e.forEach((e=>{if(!e.data)return;if(!e.data.isPodTarget)return;let o=t;e.data.namespaceSelector.length>0&&e.data.namespaceSelector.forEach((e=>{if("*"===e)return;const t=e.split("=");if(1===t.length){const e=t[0];o=o.filter((t=>B(t)===e))}else o=o.filter((t=>{const o=B(t),r=n.find((e=>e.metadata.name===o));if(!r)return!1;const[a,s]=e.split("=");return r.metadata&&r.metadata.labels&&r.metadata.labels[a]&&r.metadata.labels[a]===s}))})),e.data.podSelector.length>0&&e.data.podSelector.forEach((e=>{if("*"===e)return;const[t,n]=e.split("=");o=o.filter((e=>e.metadata&&e.metadata.labels&&e.metadata.labels[t]&&e.metadata.labels[t]===n))})),e.data.matchingPods=o}))}(o,t,n),function(e){const t=new d.graphlib.Graph({});t.setGraph({rankdir:"LR",nodesep:100,ranksep:100,ranker:"longest-path",marginx:25,marginy:25}),t.setDefaultEdgeLabel((function(){return{}})),e.forEach((e=>{e instanceof y&&t.setNode(e.id,{width:Math.max(150,7*e.data.name.length),height:Math.max(40,20+15*e.data.ports.length+15*e.data.matchingPods.length)})})),e.forEach((e=>{e instanceof p&&t.setEdge(e.sourceNodeId,e.targetNodeId)})),d.layout(t);const n={};t.nodes().forEach((e=>{const o=t.node(e);n[e]={x:o.x,y:o.y}})),e.forEach((e=>{if(e instanceof y){const t=n[e.id];e.setPosition(t.x,t.y)}}))}(o),o}function I(e){if(!e||!e.matchLabels)return;const t=[];return Object.keys(e.matchLabels).forEach((n=>{t.push(`${n}=${e.matchLabels[n]}`)})),t}const L=require("classcat");var R=e.n(L);const D=require("easy-peasy"),z=(0,D.createTypedHooks)(),V=z.useStoreActions,Y=(z.useStoreDispatch,z.useStoreState),X=z.useStore,H=require("resize-observer"),A=e=>{const t=e?.target;return["INPUT","SELECT","TEXTAREA","BUTTON"].includes(t?.nodeName)||t?.hasAttribute("contenteditable")},F=e=>({width:e.offsetWidth,height:e.offsetHeight}),j=(e,t=0,n=1)=>Math.min(Math.max(e,t),n),Z=e=>{const[t,o]=(0,n.useState)(!1);function r(t){t.keyCode!==e||A(t)||o(!0)}const a=t=>{t.keyCode!==e||A(t)||o(!1)};return(0,n.useEffect)((()=>(window.addEventListener("keydown",r),window.addEventListener("keyup",a),()=>{window.removeEventListener("keydown",r),window.removeEventListener("keyup",a)})),[]),t},G=require("fast-deep-equal");var W=e.n(G);const U=require("d3-zoom"),q=require("d3-selection"),K=(e,t,n,o)=>{const r=t.querySelectorAll(e);return r&&r.length?Array.from(r).map((e=>{const t=e.getBoundingClientRect(),r=F(e),a=e.getAttribute("data-nodeid"),s=e.getAttribute("data-handlepos"),i=a?a.split("__"):null;let l=null;return i&&(l=i.length?i[1]:i),{id:l,position:s,x:(t.left-n.left)*(1/o),y:(t.top-n.top)*(1/o),...r}})):null},J={width:0,height:0,viewportBox:(0,D.computed)((e=>({x:0,y:0,width:e.width,height:e.height}))),transform:[0,0,1],elements:[],elementsMap:(0,D.computed)((e=>e.elements.reduce(((e,t)=>(e[t.id]=t,e)),{}))),nodes:(0,D.computed)((e=>e.elements.filter((e=>te(e))))),edges:(0,D.computed)((e=>e.elements.filter((e=>ee(e))))),selectedElements:null,selectedNodesBbox:{x:0,y:0,width:0,height:0},d3Zoom:null,d3Selection:null,d3Initialised:!1,minZoom:.5,maxZoom:2,translateExtent:[[Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY],[Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY]],nodesSelectionActive:!1,selectionActive:!1,userSelectionRect:{startX:0,startY:0,x:0,y:0,width:0,height:0,draw:!1},connectionPending:!1,connectionNodeId:null,connectionOnlyNodeId:(0,D.computed)((e=>e.connectionNodeId?.split("__")?.[0])),connectionOnlyPortId:(0,D.computed)((e=>e.connectionNodeId?.split("__")?.[1])),connectionHandleType:"source",connectionPosition:{x:0,y:0},snapGrid:[15,15],snapToGrid:!1,nodesDraggable:!0,nodesConnectable:!0,elementsSelectable:!0,reactFlowVersion:"undefined"!=typeof __REACT_FLOW_VERSION__?__REACT_FLOW_VERSION__:"-",setConnectionPending:(0,D.action)(((e,t)=>{e.connectionPending=t})),setOnConnect:(0,D.action)(((e,t)=>{e.onConnect=t})),setOnConnectStart:(0,D.action)(((e,t)=>{e.onConnectStart=t})),setOnConnectStop:(0,D.action)(((e,t)=>{e.onConnectStop=t})),setOnConnectEnd:(0,D.action)(((e,t)=>{e.onConnectEnd=t})),setElements:(0,D.action)(((e,t)=>{e.elements=t})),updateNodeDimensions:(0,D.action)(((e,{id:t,nodeElement:n})=>{const o=F(n),r=e.nodes.find((e=>e.id===t));if(!r||r.__rf.width===o.width&&r.__rf.height===o.height)return;const a=n.getBoundingClientRect(),s={source:K(".source",n,a,e.transform[2]),target:K(".target",n,a,e.transform[2])};e.elements.forEach((e=>{e.id===t&&te(e)&&(e.__rf.width=o.width,e.__rf.height=o.height,e.__rf.handleBounds=s)}))})),updateNodePos:(0,D.action)(((e,{id:t,pos:n})=>{let o=n;if(e.snapToGrid){const[t,r]=e.snapGrid;o={x:t*Math.round(n.x/t),y:r*Math.round(n.y/r)}}e.elements.forEach((e=>{e.id===t&&te(e)&&(e.__rf.position=o)}))})),updateNodePosDiff:(0,D.action)(((e,{id:t,diff:n=null,isDragging:o=!0})=>{e.elements.forEach((e=>{e.id===t&&te(e)&&(n&&(e.__rf.position={x:e.__rf.position.x+n.x,y:e.__rf.position.y+n.y}),e.__rf.isDragging=o)}))})),setUserSelection:(0,D.action)(((e,t)=>{e.userSelectionRect={width:0,height:0,startX:t.x,startY:t.y,x:t.x,y:t.y,draw:!0},e.selectionActive=!0})),updateUserSelection:(0,D.action)(((e,t)=>{const n=e.userSelectionRect.startX||0,o=e.userSelectionRect.startY||0,r=t.x<n,a=t.y<o,s={...e.userSelectionRect,x:r?t.x:e.userSelectionRect.x,y:a?t.y:e.userSelectionRect.y,width:r?n-t.x:t.x-n,height:a?o-t.y:t.y-o},i=ie(e.nodes,s,e.transform),l=le(i,e.edges),c=[...i,...l],d=!W()(c,e.selectedElements);e.userSelectionRect=s,d&&(e.selectedElements=c.length>0?c:null)})),unsetUserSelection:(0,D.action)((e=>{const t=e.selectedElements?.filter(te);if(!t)return e.selectionActive=!1,e.userSelectionRect.draw=!1,e.nodesSelectionActive=!1,void(e.selectedElements=null);const n=se(t);e.nodesSelectionActive=!0,e.selectedNodesBbox=n,e.userSelectionRect.draw=!1,e.selectionActive=!1})),setSelection:(0,D.action)(((e,t)=>{e.selectionActive=t})),unsetNodesSelection:(0,D.action)((e=>{e.nodesSelectionActive=!1,e.selectedElements=null})),setSelectedElements:(0,D.action)(((e,t)=>{const n=Array.isArray(t)?t:[t],o=W()(n,e.selectedElements)?e.selectedElements:n;e.selectedElements=o})),updateTransform:(0,D.action)(((e,t)=>{e.transform[0]=t.x,e.transform[1]=t.y,e.transform[2]=t.k})),setInitTransform:(0,D.action)(((e,t)=>{if(e.transform[0]=t.x,e.transform[1]=t.y,e.transform[2]=t.k,e.d3Selection){const n=U.zoomIdentity.translate(t.x,t.y).scale(t.k);e.d3Selection.property("__zoom",n)}})),updateSize:(0,D.action)(((e,t)=>{e.width=t.width||500,e.height=t.height||500})),initD3:(0,D.action)(((e,{zoomPane:t,defaultPosition:n,defaultZoom:o,translateExtent:r})=>{const a=void 0!==r?r:e.translateExtent,s=(0,U.zoom)().scaleExtent([e.minZoom,e.maxZoom]).translateExtent(a),i=(0,q.select)(t).call(s),l=j(n[0],a[0][0],a[1][0]),c=j(n[1],a[0][1],a[1][1]),d=j(o,e.minZoom,e.maxZoom),u=U.zoomIdentity.translate(l,c).scale(d);i.property("__zoom",u),e.transform[0]=l,e.transform[1]=c,e.transform[2]=d,e.d3Zoom=s,e.d3Selection=i,e.d3Initialised=!0})),setMinZoom:(0,D.action)(((e,t)=>{e.minZoom=t,e.d3Zoom&&e.d3Zoom.scaleExtent([t,e.maxZoom])})),setMaxZoom:(0,D.action)(((e,t)=>{e.maxZoom=t,e.d3Zoom&&e.d3Zoom.scaleExtent([e.minZoom,t])})),setTranslateExtent:(0,D.action)(((e,t)=>{e.translateExtent=t,e.d3Zoom&&e.d3Zoom.translateExtent(t)})),setConnectionPosition:(0,D.action)(((e,t)=>{e.connectionPosition=t})),setConnectionNodeId:(0,D.action)(((e,{connectionNodeId:t,connectionHandleType:n})=>{e.connectionNodeId=t,e.connectionHandleType=n})),setSnapToGrid:(0,D.action)(((e,t)=>{e.snapToGrid=t})),setSnapGrid:(0,D.action)(((e,t)=>{e.snapGrid[0]=t[0],e.snapGrid[1]=t[1]})),setInteractive:(0,D.action)(((e,t)=>{e.nodesDraggable=t,e.nodesConnectable=t,e.elementsSelectable=t})),setNodesDraggable:(0,D.action)(((e,t)=>{e.nodesDraggable=t})),setNodesConnectable:(0,D.action)(((e,t)=>{e.nodesConnectable=t})),setElementsSelectable:(0,D.action)(((e,t)=>{e.elementsSelectable=t})),fitView:(0,D.action)(((e,t={padding:.1})=>{const{padding:n}=t,{nodes:o,width:r,height:a,d3Selection:s,minZoom:i,maxZoom:l}=e;if(!s||!o.length)return;const c=se(o),d=r/(c.width*(1+n)),u=a/(c.height*(1+n)),m=Math.min(d,u),p=j(m,i,l),g=[r/2-(c.x+c.width/2)*p,a/2-(c.y+c.height/2)*p],f=U.zoomIdentity.translate(g[0],g[1]).scale(p);s.property("__zoom",f),e.transform[0]=f.x,e.transform[1]=f.y,e.transform[2]=f.k})),zoomTo:(0,D.action)(((e,t)=>{const{d3Selection:n,transform:o,minZoom:r,maxZoom:a}=e,s=j(t,r,a);if(n){const t=[e.width/2,e.height/2],r=[(t[0]-o[0])/o[2],(t[1]-o[1])/o[2]],a=t[0]-r[0]*s,i=t[1]-r[1]*s,l=U.zoomIdentity.translate(a,i).scale(s);n.property("__zoom",l),e.transform[0]=l.x,e.transform[1]=l.y,e.transform[2]=l.k}})),zoom:(0,D.thunk)(((e,t,n)=>{const{transform:o}=n.getState(),r=o[2]+t;e.zoomTo(r)})),zoomIn:(0,D.thunk)((e=>{e.zoom(.2)})),zoomOut:(0,D.thunk)((e=>{e.zoom(-.2)}))},Q=(0,D.createStore)(J,{devTools:!1}),ee=e=>"id"in e&&"source"in e&&"target"in e,te=e=>"id"in e&&!("source"in e)&&!("target"in e),ne=e=>t=>{const{transform:n,snapToGrid:o,snapGrid:r}=e.getState();return(({x:e,y:t},[n,o,r],a,[s,i])=>{const l={x:(e-n)/r,y:(t-o)/r};return a?{x:s*Math.round(l.x/s),y:i*Math.round(l.y/i)}:l})(t,n,o,r)},oe=(e,t)=>({x:Math.min(e.x,t.x),y:Math.min(e.y,t.y),x2:Math.max(e.x2,t.x2),y2:Math.max(e.y2,t.y2)}),re=({x:e,y:t,width:n,height:o})=>({x:e,y:t,x2:e+n,y2:t+o}),ae=({x:e,y:t,x2:n,y2:o})=>({x:e,y:t,width:n-e,height:o-t}),se=e=>{const t=e.reduce(((e,{__rf:{position:t,width:n,height:o}={}})=>oe(e,re({...t,width:n,height:o}))),{x:1/0,y:1/0,x2:-1/0,y2:-1/0});return ae(t)},ie=(e,t,[n,o,r]=[0,0,1],a=!1)=>{const s=re({x:(t.x-n)/r,y:(t.y-o)/r,width:t.width/r,height:t.height/r});return e.filter((({__rf:{position:e,width:t,height:n,isDragging:o}})=>{const r=re({...e,width:t,height:n}),i=Math.max(0,Math.min(s.x2,r.x2)-Math.max(s.x,r.x))*Math.max(0,Math.min(s.y2,r.y2)-Math.max(s.y,r.y));return!(null!==t&&null!==n&&!o)||(a?i>0:i>=t*n)}))},le=(e,t)=>{const n=e.map((e=>e.id));return t.filter((e=>{const t=e.source.split("__")[0],o=e.target.split("__")[0];return n.includes(t)||n.includes(o)}))},ce=e=>()=>{const{nodes:t=[],edges:n=[]}=e.getState();return((e,t)=>[...e.map((e=>{const t={...e};return delete t.__rf,t})),...t.map((e=>({...e})))])(t,n)},de=(e,t)=>e.x!==t.x||e.y!==t.y||e.zoom!==t.k,ue=e=>({x:e.x,y:e.y,zoom:e.k});function me(e){const t=e.target.closest(".react-flow");if(!t)return;const n=t.getBoundingClientRect();return{x:e.clientX-n.left,y:e.clientY-n.top}}const pe=()=>{const e=Y((e=>e.userSelectionRect));return e.draw?o().createElement("div",{className:"react-flow__selection",style:{width:e.width,height:e.height,transform:`translate(${e.x}px, ${e.y}px)`}}):null},ge=(0,n.memo)((({selectionKeyPressed:e})=>{const t=Y((e=>e.selectionActive)),n=Y((e=>e.elementsSelectable)),r=V((e=>e.setUserSelection)),a=V((e=>e.updateUserSelection)),s=V((e=>e.unsetUserSelection)),i=V((e=>e.unsetNodesSelection));return n&&(t||e)?o().createElement("div",{className:"react-flow__selectionpane",onMouseDown:e=>{const t=me(e);t&&r(t)},onMouseMove:n=>{if(!e||!t)return;const o=me(n);o&&a(o)},onMouseUp:()=>s(),onMouseLeave:()=>{s(),i()}},o().createElement(pe,null)):null})),fe=require("react-draggable");var he=e.n(fe);const ye=({onSelectionDragStart:e,onSelectionDrag:t,onSelectionDragStop:r,onSelectionContextMenu:a})=>{const[s,i,l]=Y((e=>e.transform)),c=Y((e=>e.selectedNodesBbox)),d=Y((e=>e.selectionActive)),u=Y((e=>e.selectedElements)),m=Y((e=>e.snapToGrid)),p=Y((e=>e.snapGrid)),g=Y((e=>e.nodes)),f=V((e=>e.updateNodePosDiff)),h=(0,n.useRef)(null),y=(0,n.useMemo)((()=>m?p:[1,1]),[m,p]),w=(0,n.useMemo)((()=>u?u.filter(te).map((e=>g.find((t=>t.id===e.id)))):[]),[u]),E=(0,n.useMemo)((()=>({transform:`translate(${s}px,${i}px) scale(${l})`})),[s,i,l]),b=(0,n.useMemo)((()=>({width:c.width,height:c.height,top:c.y,left:c.x})),[c]),v=(0,n.useCallback)((t=>{e?.(t,w)}),[e,w]),S=(0,n.useCallback)(((e,n)=>{t&&t(e,w),w?.forEach((e=>{f({id:e.id,diff:{x:n.deltaX,y:n.deltaY}})}))}),[t,w,f]),x=(0,n.useCallback)((e=>{w?.forEach((e=>{f({id:e.id,isDragging:!1})})),r?.(e,w)}),[w,r]),_=(0,n.useCallback)((e=>{const t=u?u.filter(te).map((e=>g.find((t=>t.id===e.id)))):[];a?.(e,t)}),[a]);return!u||d?null:o().createElement("div",{className:"react-flow__nodesselection",style:E},o().createElement(he(),{scale:l,grid:y,onStart:e=>v(e),onDrag:(e,t)=>S(e,t),onStop:e=>x(e),nodeRef:h},o().createElement("div",{ref:h,className:"react-flow__nodesselection-rect",onContextMenu:_,style:b})))},we=({children:e,onPaneClick:t,onPaneContextMenu:r,onPaneScroll:a,onElementsRemove:s,deleteKeyCode:i,onMove:l,onMoveStart:c,onMoveEnd:d,selectionKeyCode:u,zoomOnScroll:m,zoomOnDoubleClick:p,paneMoveable:g,defaultPosition:f,defaultZoom:h,translateExtent:y,onSelectionDragStart:w,onSelectionDrag:E,onSelectionDragStop:b,onSelectionContextMenu:v})=>{const S=(0,n.useRef)(null),x=V((e=>e.unsetNodesSelection)),_=Y((e=>e.nodesSelectionActive)),N=Z(u);(e=>{const t=V((e=>e.updateSize));(0,n.useEffect)((()=>{let n;const o=()=>{if(!e.current)return;const n=F(e.current);0!==n.height&&0!==n.width||console.warn("The React Flow parent container needs a width and a height to render the graph."),t(n)};return o(),window.onresize=o,e.current&&(n=new H.ResizeObserver((()=>o())),n.observe(e.current)),()=>{window.onresize=null,n&&e.current&&n.unobserve(e.current)}}),[])})(S),(({deleteKeyCode:e,onElementsRemove:t})=>{const o=Y((e=>e.selectedElements)),r=Y((e=>e.edges)),a=V((e=>e.unsetNodesSelection)),s=Z(e);(0,n.useEffect)((()=>{if(t&&s&&o){let e=o;if(1===o.length&&te(o[0])){const t=o[0],n=le([t],r);e=[...o,...n]}t(e),a()}}),[s])})({onElementsRemove:s,deleteKeyCode:i}),(({zoomPane:e,onMove:t,onMoveStart:o,onMoveEnd:r,zoomOnScroll:a=!0,zoomOnDoubleClick:s=!0,selectionKeyPressed:i,paneMoveable:l=!0,defaultPosition:c=[0,0],defaultZoom:d=1,translateExtent:u})=>{const m=(0,n.useRef)({x:0,y:0,zoom:0}),p=Y((e=>e.d3Zoom)),g=V((e=>e.initD3)),f=V((e=>e.updateTransform));(0,n.useEffect)((()=>{e.current&&g({zoomPane:e.current,defaultPosition:c,defaultZoom:d,translateExtent:u})}),[]),(0,n.useEffect)((()=>{p&&(i?p.on("zoom",null):p.on("zoom",(e=>{if(f(e.transform),t){const n=ue(e.transform);t(n)}})))}),[i,p,f,t]),(0,n.useEffect)((()=>{p&&(o?p.on("start",(e=>{if(de(m.current,e.transform)){const t=ue(e.transform);m.current=t,o(t)}})):p.on("start",null))}),[p,o]),(0,n.useEffect)((()=>{p&&(r?p.on("end",(e=>{if(de(m.current,e.transform)){const t=ue(e.transform);m.current=t,r(t)}})):p.on("end",null))}),[p,r]),(0,n.useEffect)((()=>{p&&p.filter((e=>!(i||e.target.closest(".react-flow__node")&&"wheel"!==e.type||e.target.closest(".react-flow__nodesselection")&&"wheel"!==e.type||!l||!a&&"wheel"===e.type||!s&&"dblclick"===e.type||e.ctrlKey||e.button)))}),[p,a,s,l,i])})({zoomPane:S,onMove:l,onMoveStart:c,onMoveEnd:d,selectionKeyPressed:N,zoomOnScroll:m,zoomOnDoubleClick:p,paneMoveable:g,defaultPosition:f,defaultZoom:h,translateExtent:y});const C=(0,n.useCallback)((e=>{t?.(e),x()}),[t]),P=(0,n.useCallback)((e=>{r?.(e)}),[r]),M=(0,n.useCallback)((e=>{a?.(e)}),[a]);return o().createElement("div",{className:"react-flow__renderer",ref:S},e,o().createElement(ge,{selectionKeyPressed:N}),_&&o().createElement(ye,{onSelectionDragStart:w,onSelectionDrag:E,onSelectionDragStop:b,onSelectionContextMenu:v}),o().createElement("div",{className:"react-flow__pane",onClick:C,onContextMenu:P,onWheel:M}))};we.displayName="FlowRenderer";const Ee=(0,n.memo)(we),be=e=>{const t=Y((e=>e.nodes)),n=Y((e=>e.transform)),r=Y((e=>e.selectedElements)),a=Y((e=>e.viewportBox)),s=Y((e=>e.nodesDraggable)),i=Y((e=>e.nodesConnectable)),l=Y((e=>e.elementsSelectable)),c={transform:`translate(${n[0]}px,${n[1]}px) scale(${n[2]})`},d=e.onlyRenderVisibleNodes?ie(t,a,n,!0):t;return o().createElement("div",{className:"react-flow__nodes",style:c},d.map((t=>function(e,t,n,r,a,s,i){const l=e.type||"default",c=t.nodeTypes[l]||t.nodeTypes.default;t.nodeTypes[l]||console.warn(`Node type "${l}" not found. Using fallback type "default".`);const d=!!r&&r.some((({id:t})=>t===e.id)),u=!!(e.draggable||a&&void 0===e.draggable),m=!!(e.selectable||i&&void 0===e.selectable),p=!!(e.connectable||s&&void 0===e.connectable),g=null!==e.__rf.width&&null!==e.__rf.height;return o().createElement(c,{key:e.id,id:e.id,type:l,data:e.data,xPos:e.__rf.position.x,yPos:e.__rf.position.y,isDragging:e.__rf.isDragging,onClick:t.onElementClick,onMouseEnter:t.onNodeMouseEnter,onMouseMove:t.onNodeMouseMove,onMouseLeave:t.onNodeMouseLeave,onContextMenu:t.onNodeContextMenu,onNodeDragStart:t.onNodeDragStart,onNodeDragStop:t.onNodeDragStop,transform:n,selected:d,style:e.style,className:e.className,isDraggable:u,isSelectable:m,isConnectable:p,sourcePosition:e.sourcePosition,targetPosition:e.targetPosition,selectNodesOnDrag:t.selectNodesOnDrag,isHidden:e.isHidden,isInitialized:g,snapGrid:t.snapGrid,snapToGrid:t.snapToGrid})}(t,e,n,r,s,i,l))))};be.displayName="NodeRenderer";const ve=(0,n.memo)(be),Se=(0,n.memo)((({x:e,y:t,label:r,labelStyle:a={},labelShowBg:s=!0,labelBgStyle:i={},labelBgPadding:l=[2,4],labelBgBorderRadius:c=2})=>{const d=(0,n.useRef)(null),[u,m]=(0,n.useState)({x:0,y:0,width:0,height:0});return(0,n.useEffect)((()=>{if(d.current){const e=d.current.getBBox();m({x:e.x,y:e.y,width:e.width,height:e.height})}}),[]),void 0!==r&&r?o().createElement("g",{transform:`translate(${e-u.width/2} ${t-u.height/2})`},s&&o().createElement("rect",{width:u.width+2*l[0],x:-l[0],y:-l[1],height:u.height+2*l[1],className:"react-flow__edge-textbg",style:i,rx:c,ry:c}),o().createElement("text",{className:"react-flow__edge-text",y:u.height/2,dy:"0.3em",ref:d,style:a},r)):null})),xe=(e,t)=>void 0!==t&&t?`url(#${t})`:void 0!==e?`url(#react-flow__${e})`:"none",_e=({sourceX:e,sourceY:t,targetX:n,targetY:o})=>{const r=Math.abs(n-e)/2,a=n<e?n+r:n-r,s=Math.abs(o-t)/2;return[a,o<t?o+s:o-s,r,s]};var Ne,Ce,Pe,Me;function $e({sourceX:e,sourceY:t,sourcePosition:n=Ne.Bottom,targetX:o,targetY:r,targetPosition:a=Ne.Top,centerX:s,centerY:i}){const[l,c]=_e({sourceX:e,sourceY:t,targetX:o,targetY:r}),d=[Ne.Left,Ne.Right],u=void 0!==s?s:l,m=void 0!==i?i:c;let p=`M${e},${t} C${e},${m} ${o},${m} ${o},${r}`;return d.includes(n)&&d.includes(a)?p=`M${e},${t} C${u},${t} ${u},${r} ${o},${r}`:d.includes(a)?p=`M${e},${t} C${e},${r} ${e},${r} ${o},${r}`:d.includes(n)&&(p=`M${e},${t} C${o},${t} ${o},${t} ${o},${r}`),p}!function(e){e.Left="left",e.Top="top",e.Right="right",e.Bottom="bottom"}(Ne||(Ne={})),function(e){e.Arrow="arrow",e.ArrowClosed="arrowclosed"}(Ce||(Ce={})),function(e){e.Lines="lines",e.Dots="dots"}(Pe||(Pe={})),function(e){e.Bezier="default",e.Straight="straight",e.Step="step",e.SmoothStep="smoothstep"}(Me||(Me={}));const ke=(0,n.memo)((({sourceX:e,sourceY:t,targetX:n,targetY:r,sourcePosition:a=Ne.Bottom,targetPosition:s=Ne.Top,label:i,labelStyle:l,labelShowBg:c,labelBgStyle:d,labelBgPadding:u,labelBgBorderRadius:m,style:p,arrowHeadType:g,markerEndId:f})=>{const[h,y]=_e({sourceX:e,sourceY:t,targetX:n,targetY:r}),w=$e({sourceX:e,sourceY:t,sourcePosition:a,targetX:n,targetY:r,targetPosition:s}),E=i?o().createElement(Se,{x:h,y,label:i,labelStyle:l,labelShowBg:c,labelBgStyle:d,labelBgPadding:u,labelBgBorderRadius:m}):null,b=xe(g,f);return o().createElement(o().Fragment,null,o().createElement("path",{style:p,d:w,className:"react-flow__edge-path",markerEnd:b}),E)})),Be=(e,t,n)=>`L ${e},${t-n}Q ${e},${t} ${e+n},${t}`,Te=(e,t,n)=>`L ${e},${t-n}Q ${e},${t} ${e-n},${t}`,Oe=(e,t,n)=>`L ${e-n},${t}Q ${e},${t} ${e},${t-n}`,Ie=(e,t,n)=>`L ${e},${t+n}Q ${e},${t} ${e+n},${t}`,Le=(e,t,n)=>`L ${e},${t+n}Q ${e},${t} ${e-n},${t}`,Re=(e,t,n)=>`L ${e-n},${t}Q ${e},${t} ${e},${t+n}`;function De({sourceX:e,sourceY:t,sourcePosition:n=Ne.Bottom,targetX:o,targetY:r,targetPosition:a=Ne.Top,borderRadius:s=5,centerX:i,centerY:l}){const[c,d,u,m]=_e({sourceX:e,sourceY:t,targetX:o,targetY:r}),p=Math.min(s,Math.abs(o-e)),g=Math.min(s,Math.abs(r-t)),f=Math.min(p,g,u,m),h=[Ne.Left,Ne.Right];let y=null,w=null;const E=void 0!==i?i:c,b=void 0!==l?l:d;return e<=o?(y=t<=r?Be(e,b,f):Ie(e,b,f),w=t<=r?Re(o,b,f):Oe(o,b,f)):(y=t<r?Te(e,b,f):Le(e,b,f),w=t<r?((e,t,n)=>`L ${e+n},${t}Q ${e},${t} ${e},${t+n}`)(o,b,f):((e,t,n)=>`L ${e+n},${t}Q ${e},${t} ${e},${t-n}`)(o,b,f)),h.includes(n)&&h.includes(a)?e<=o&&(y=t<=r?Re(E,t,f):Oe(E,t,f),w=t<=r?Be(E,r,f):Ie(E,r,f)):h.includes(n)&&!h.includes(a)?(y=e<=o?t<=r?Re(o,t,f):Oe(o,t,f):t<=r?Te(e,r,f):Le(e,r,f),w=""):!h.includes(n)&&h.includes(a)&&(y=e<=o?t<=r?Be(e,r,f):Ie(e,r,f):t<=r?Te(e,r,f):Le(e,r,f),w=""),`M ${e},${t}${y}${w}L ${o},${r}`}const ze=(0,n.memo)((({sourceX:e,sourceY:t,targetX:n,targetY:r,label:a,labelStyle:s,labelShowBg:i,labelBgStyle:l,labelBgPadding:c,labelBgBorderRadius:d,style:u,sourcePosition:m=Ne.Bottom,targetPosition:p=Ne.Top,arrowHeadType:g,markerEndId:f,borderRadius:h=5})=>{const[y,w]=_e({sourceX:e,sourceY:t,targetX:n,targetY:r}),E=De({sourceX:e,sourceY:t,sourcePosition:m,targetX:n,targetY:r,targetPosition:p,borderRadius:h}),b=xe(g,f),v=a?o().createElement(Se,{x:y,y:w,label:a,labelStyle:s,labelShowBg:i,labelBgStyle:l,labelBgPadding:c,labelBgBorderRadius:d}):null;return o().createElement(o().Fragment,null,o().createElement("path",{style:u,className:"react-flow__edge-path",d:E,markerEnd:b}),v)})),Ve=({connectionNodeId:e,connectionHandleType:t,connectionLineStyle:r,connectionPositionX:a,connectionPositionY:s,connectionLineType:i=Me.Bezier,nodes:l=[],transform:c,isConnectable:d,CustomConnectionLineComponent:u})=>{const[m,p]=(0,n.useState)(null),g=e.includes("__"),f=e.split("__"),h=f[0],y=g?f[1]:null;if((0,n.useEffect)((()=>{const e=l.find((e=>e.id===h))||null;p(e)}),[]),!m||!d)return null;const w=y?m.__rf.handleBounds[t].find((e=>e.id===y)):m.__rf.handleBounds[t][0],E=w?w.x+w.width/2:m.__rf.width/2,b=w?w.y+w.height/2:m.__rf.height,v=m.__rf.position.x+E,S=m.__rf.position.y+b,x=(a-c[0])/c[2],_=(s-c[1])/c[2],N=w?.position===Ne.Left||w?.position===Ne.Right?Ne.Left:Ne.Top;if(u)return o().createElement("g",{className:"react-flow__connection"},o().createElement(u,{sourceX:v,sourceY:S,sourcePosition:w?.position,targetX:x,targetY:_,targetPosition:N,connectionLineType:i,connectionLineStyle:r}));let C="";return C=i===Me.Bezier?$e({sourceX:v,sourceY:S,sourcePosition:w?.position,targetX:x,targetY:_,targetPosition:N}):i===Me.Step?De({sourceX:v,sourceY:S,sourcePosition:w?.position,targetX:x,targetY:_,targetPosition:N,borderRadius:0}):i===Me.SmoothStep?De({sourceX:v,sourceY:S,sourcePosition:w?.position,targetX:x,targetY:_,targetPosition:N}):`M${v},${S} ${x},${_}`,o().createElement("g",{className:"react-flow__connection"},o().createElement("path",{d:C,className:"react-flow__connection-path",style:r}))},Ye=({id:e,children:t})=>o().createElement("marker",{className:"react-flow__arrowhead",id:e,markerWidth:"12.5",markerHeight:"12.5",viewBox:"-10 -10 20 20",orient:"auto",refX:"0",refY:"0"},t),Xe=({color:e})=>o().createElement("defs",null,o().createElement(Ye,{id:"react-flow__arrowclosed"},o().createElement("polyline",{stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"1",fill:e,points:"-5,-4 0,0 -5,4 -5,-4"})),o().createElement(Ye,{id:"react-flow__arrow"},o().createElement("polyline",{stroke:e,strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:"1.5",fill:"none",points:"-5,-4 0,0 -5,4"})));Xe.displayName="MarkerDefinitions";const He=Xe;function Ae(e,t,n=null){if(!n)switch(e){case Ne.Top:return{x:t.__rf.width/2,y:0};case Ne.Right:return{x:t.__rf.width,y:t.__rf.height/2};case Ne.Bottom:return{x:t.__rf.width/2,y:t.__rf.height};case Ne.Left:return{x:0,y:t.__rf.height/2}}switch(e){case Ne.Top:return{x:n.x+n.width/2,y:n.y};case Ne.Right:return{x:n.x+n.width,y:n.y+n.height/2};case Ne.Bottom:return{x:n.x+n.width/2,y:n.y+n.height};case Ne.Left:return{x:n.x,y:n.y+n.height/2}}}function Fe(e,t){let n=null;return e?(1!==e.length&&t?t&&(n=e.find((e=>e.id===t))):n=e[0],n):null}const je=e=>{const[t,n,r]=Y((e=>e.transform)),a=Y((e=>e.edges)),s=Y((e=>e.nodes)),i=Y((e=>e.connectionNodeId)),l=Y((e=>e.connectionHandleType)),c=Y((e=>e.connectionPosition)),d=Y((e=>e.selectedElements)),u=Y((e=>e.nodesConnectable)),m=Y((e=>e.elementsSelectable)),p=Y((e=>e.width)),g=Y((e=>e.height)),{connectionLineType:f,arrowHeadColor:h,connectionLineStyle:y,connectionLineComponent:w}=e;if(!p)return null;const E=`translate(${t},${n}) scale(${r})`,b=i&&l;return o().createElement("svg",{width:p,height:g,className:"react-flow__edges"},o().createElement(He,{color:h}),o().createElement("g",{transform:E},a.map((t=>function(e,t,n,r,a){const[s,i]=e.source.split("__"),[l,c]=e.target.split("__"),d=n.find((e=>e.id===s)),u=n.find((e=>e.id===l));if(!d)throw new Error(`couldn't create edge for source id: ${s}`);if(!u)throw new Error(`couldn't create edge for target id: ${l}`);if(!d.__rf.width||!d.__rf.height)return null;const m=e.type||"default",p=t.edgeTypes[m]||t.edgeTypes.default,g=Fe(d.__rf.handleBounds.source,i),f=Fe(u.__rf.handleBounds.target,c),h=g?g.position:Ne.Bottom,y=f?f.position:Ne.Top,{sourceX:w,sourceY:E,targetX:b,targetY:v}=function(e,t,n,o,r,a){const s=Ae(n,e,t),i=e.__rf.position.x+s.x,l=e.__rf.position.y+s.y,c=Ae(a,o,r);return{sourceX:i,sourceY:l,targetX:o.__rf.position.x+c.x,targetY:o.__rf.position.y+c.y}}(d,g,h,u,f,y),S=!!r&&r.some((t=>ee(t)&&t.id===e.id));return o().createElement(p,{key:e.id,id:e.id,className:e.className,type:e.type,data:e.data,onClick:t.onElementClick,selected:S,animated:e.animated,label:e.label,labelStyle:e.labelStyle,labelShowBg:e.labelShowBg,labelBgStyle:e.labelBgStyle,labelBgPadding:e.labelBgPadding,labelBgBorderRadius:e.labelBgBorderRadius,style:e.style,arrowHeadType:e.arrowHeadType,source:e.source,target:e.target,sourceHandleId:i,targetHandleId:c,sourceX:w,sourceY:E,targetX:b,targetY:v,sourcePosition:h,targetPosition:y,elementsSelectable:a,markerEndId:t.markerEndId,isHidden:e.isHidden})}(t,e,s,d,m))),b&&o().createElement(Ve,{nodes:s,connectionNodeId:i,connectionHandleType:l,connectionPositionX:c.x,connectionPositionY:c.y,transform:[t,n,r],connectionLineStyle:y,connectionLineType:f,isConnectable:u,CustomConnectionLineComponent:w})))};je.displayName="EdgeRenderer";const Ze=(0,n.memo)(je),Ge=({nodeTypes:e,edgeTypes:t,onMove:r,onMoveStart:a,onMoveEnd:s,onLoad:i,onElementClick:l,onNodeMouseEnter:c,onNodeMouseMove:d,onNodeMouseLeave:u,onNodeContextMenu:m,onNodeDragStart:p,onNodeDragStop:g,onSelectionDragStart:f,onSelectionDrag:h,onSelectionDragStop:y,onSelectionContextMenu:w,connectionLineType:E,connectionLineStyle:b,connectionLineComponent:v,selectionKeyCode:S,onElementsRemove:x,deleteKeyCode:_,elements:N,onConnect:C,onConnectStart:P,onConnectStop:M,onConnectEnd:$,snapToGrid:k,snapGrid:B,onlyRenderVisibleNodes:T,nodesDraggable:O,nodesConnectable:I,elementsSelectable:L,selectNodesOnDrag:R=!0,minZoom:D,maxZoom:z,defaultZoom:H,defaultPosition:A,translateExtent:F,arrowHeadColor:j,markerEndId:Z,zoomOnScroll:G,zoomOnDoubleClick:U,paneMoveable:q,onPaneClick:K,onPaneScroll:J,onPaneContextMenu:Q})=>{const oe=(0,n.useRef)(!1),re=Y((e=>e.d3Initialised)),ae=V((e=>e.setOnConnect)),se=V((e=>e.setOnConnectStart)),ie=V((e=>e.setOnConnectStop)),le=V((e=>e.setOnConnectEnd)),de=V((e=>e.setSnapGrid)),ue=V((e=>e.setSnapToGrid)),me=V((e=>e.setNodesDraggable)),pe=V((e=>e.setNodesConnectable)),ge=V((e=>e.setElementsSelectable)),fe=V((e=>e.setInitTransform)),he=V((e=>e.setMinZoom)),ye=V((e=>e.setMaxZoom)),we=V((e=>e.setTranslateExtent)),be=V((e=>e.fitView)),Se=V((e=>e.zoom)),xe=V((e=>e.zoomTo)),_e=X();return(e=>{const t=Y((e=>e.elements)),o=V((e=>e.setElements));(0,n.useEffect)((()=>{const n=e.map((e=>{const n=t.find((t=>t.id===e.id?.toString()));if(n){const t=W()(n.data,e.data)?n.data:{...n.data,...e.data},o=W()(n.style,e.style)?n.style:{...n.style,...e.style},r={...n};if(void 0!==t&&(r.data=t),void 0!==o&&(r.style=o),void 0!==e.className&&(r.className=e.className),void 0!==e.isHidden&&(r.isHidden=e.isHidden),void 0!==e.type&&(r.type=e.type,te(n)&&e.type!==n.type&&(n.__rf.width=null,n.__rf.height=null)),te(n)){const t=e,o=r;return(n.position.x!==t.position.x||n.position.y!==t.position.y)&&(o.__rf={...n.__rf,position:t.position},o.position=t.position),void 0!==t.draggable&&(o.draggable=t.draggable),void 0!==t.selectable&&(o.selectable=t.selectable),void 0!==t.connectable&&(o.connectable=t.connectable),o}if(ee(n)){const t=e,o=r,a=W()(n.labelStyle,t.labelStyle)?n.labelStyle:{...n.labelStyle,...t.labelStyle},s=W()(n.labelBgStyle,t.labelBgStyle)?n.labelBgStyle:{...n.labelBgStyle,...t.labelBgStyle};return void 0!==t.label&&(o.label=t.label),void 0!==a&&(o.labelStyle=a),void 0!==t.labelShowBg&&(o.labelShowBg=t.labelShowBg),void 0!==t.labelBgPadding&&(o.labelBgPadding=t.labelBgPadding),void 0!==t.labelBgBorderRadius&&(o.labelBgBorderRadius=t.labelBgBorderRadius),void 0!==s&&(o.labelBgStyle=s),void 0!==t.animated&&(o.animated=t.animated),void 0!==t.arrowHeadType&&(o.arrowHeadType=t.arrowHeadType),o}}return(e=>{if(!e.id)throw new Error("All nodes and edges need to have an id.");return ee(e)?{...e,source:e.source.toString(),target:e.target.toString(),id:e.id.toString(),type:e.type||"default"}:{...e,id:e.id.toString(),type:e.type||"default",__rf:{position:e.position,width:null,height:null,handleBounds:{},isDragging:!1}}})(e)}));!W()(t,n)&&o(n)}),[e,t])})(N),(0,n.useEffect)((()=>{!oe.current&&re&&(i&&i({fitView:(e={padding:.1})=>be(e),zoomIn:()=>Se(.2),zoomOut:()=>Se(-.2),zoomTo:e=>xe(e),project:ne(_e),getElements:ce(_e),setTransform:e=>fe({x:e.x,y:e.y,k:e.zoom})}),oe.current=!0)}),[re,i]),(0,n.useEffect)((()=>{C&&ae(C)}),[C]),(0,n.useEffect)((()=>{P&&se(P)}),[P]),(0,n.useEffect)((()=>{M&&ie(M)}),[M]),(0,n.useEffect)((()=>{$&&le($)}),[$]),(0,n.useEffect)((()=>{void 0!==k&&ue(k)}),[k]),(0,n.useEffect)((()=>{void 0!==B&&de(B)}),[B]),(0,n.useEffect)((()=>{void 0!==O&&me(O)}),[O]),(0,n.useEffect)((()=>{void 0!==I&&pe(I)}),[I]),(0,n.useEffect)((()=>{void 0!==L&&ge(L)}),[L]),(0,n.useEffect)((()=>{void 0!==D&&he(D)}),[D]),(0,n.useEffect)((()=>{void 0!==z&&ye(z)}),[z]),(0,n.useEffect)((()=>{void 0!==F&&we(F)}),[F]),o().createElement(Ee,{onPaneClick:K,onPaneContextMenu:Q,onPaneScroll:J,onElementsRemove:x,deleteKeyCode:_,selectionKeyCode:S,onMove:r,onMoveStart:a,onMoveEnd:s,zoomOnScroll:G,zoomOnDoubleClick:U,paneMoveable:q,defaultPosition:A,defaultZoom:H,translateExtent:F,onSelectionDragStart:f,onSelectionDrag:h,onSelectionDragStop:y,onSelectionContextMenu:w},o().createElement(ve,{nodeTypes:e,onElementClick:l,onNodeMouseEnter:c,onNodeMouseMove:d,onNodeMouseLeave:u,onNodeContextMenu:m,onNodeDragStop:g,onNodeDragStart:p,onlyRenderVisibleNodes:T,selectNodesOnDrag:R,snapToGrid:k,snapGrid:B}),o().createElement(Ze,{edgeTypes:t,onElementClick:l,connectionLineType:E,connectionLineStyle:b,arrowHeadColor:j,markerEndId:Z,connectionLineComponent:v}))};Ge.displayName="GraphView";const We=(0,n.memo)(Ge),Ue=({type:e,nodeId:t,onConnect:n,onConnectStart:r,onConnectStop:a,onConnectEnd:s,position:i,setConnectionPending:l,setConnectionNodeId:c,setPosition:d,className:u,id:m=!1,isValidConnection:p,...g})=>{const f="target"===e,h=R()(["react-flow__handle",`react-flow__handle-${i}`,"nodrag",u,{source:!f,target:f}]),y=m?`${t}__${m}`:t;return o().createElement("div",{"data-nodeid":y,"data-handlepos":i,className:h,onMouseDown:e=>function(e,t,n,o,r,a,s,i,l,c,d){const u=e.target.closest(".react-flow");if(!u)return;const m=s?"target":"source",p=u.getBoundingClientRect();let g;function f(){g&&(g.classList.remove("react-flow__handle-valid"),g.classList.remove("react-flow__handle-invalid"))}function h(e){const n=document.elementFromPoint(e.clientX,e.clientY),o={elementBelow:n,isValid:!1,connection:{source:null,sourceNodeId:null,targetNodeId:null,target:null,toTarget:null},isHoveringHandle:!1},r=n&&n.classList.contains("target"),a=n&&n.classList.contains("source");if(r||a){let e;const a=n.getAttribute("data-nodeid"),l=a.split("__")?.[0],c=t.split("__")?.[0];e=s?{source:a,sourceNodeId:l,target:t,targetNodeId:c,toTarget:r}:{source:t,sourceNodeId:c,target:a,targetNodeId:l,toTarget:r};const d=i(e);o.connection=e,o.isValid=d,o.isHoveringHandle=!0}return o}function y(e){r({x:e.clientX-p.left,y:e.clientY-p.top});const{connection:t,elementBelow:n,isValid:o,isHoveringHandle:a}=h(e);if(!a)return f();t.source!==t.target&&n&&(g=n,n.classList.toggle("react-flow__handle-valid",o),n.classList.toggle("react-flow__handle-invalid",!o))}r({x:e.clientX-p.left,y:e.clientY-p.top}),n(!0),o({connectionNodeId:t,connectionHandleType:m}),l&&l(e,{nodeId:t,handleType:m}),document.addEventListener("mousemove",y),document.addEventListener("mouseup",(function e(t){const{connection:r,isValid:s}=h(t);c&&c(t),s&&a&&a(r),d&&d(t),f(),n(!1),o({connectionNodeId:null,connectionHandleType:null}),document.removeEventListener("mousemove",y),document.removeEventListener("mouseup",e)}))}(e,y,l,c,d,n,f,p,r,a,s),...g})};Ue.displayName="BaseHandle";const qe=(0,n.memo)(Ue),Ke=(0,n.createContext)(null),Je=Ke.Provider,Qe=(Ke.Consumer,Ke),et=({type:e="source",position:t=Ne.Top,isValidConnection:r=(()=>!0),isConnectable:a=!0,style:s,className:i,id:l,onConnect:c})=>{const d=(0,n.useContext)(Qe),u=V((e=>e.setConnectionPending)),m=V((e=>e.setConnectionPosition)),p=V((e=>e.setConnectionNodeId)),g=Y((e=>e.onConnect)),f=Y((e=>e.onConnectStart)),h=Y((e=>e.onConnectStop)),y=Y((e=>e.onConnectEnd)),w=R()([i,{connectable:a}]);return o().createElement(qe,{className:w,id:l,nodeId:d,setConnectionPending:u,setPosition:m,setConnectionNodeId:p,onConnect:e=>{g&&g(e),c&&c(e)},onConnectStart:f,onConnectStop:h,onConnectEnd:y,type:e,position:t,isValidConnection:r,style:s})};et.displayName="Handle";const tt=(0,n.memo)(et),nt=({data:e,isConnectable:t,targetPosition:n=Ne.Top,sourcePosition:r=Ne.Bottom})=>o().createElement(o().Fragment,null,o().createElement(tt,{type:"target",position:n,isConnectable:t}),e.label,o().createElement(tt,{type:"source",position:r,isConnectable:t}));nt.displayName="DefaultNode";const ot=(0,n.memo)(nt),rt=({data:e,isConnectable:t,sourcePosition:n=Ne.Bottom})=>o().createElement(o().Fragment,null,e.label,o().createElement(tt,{type:"source",position:n,isConnectable:t}));rt.displayName="InputNode";const at=(0,n.memo)(rt),st=({data:e,isConnectable:t,targetPosition:n=Ne.Top})=>o().createElement(o().Fragment,null,o().createElement(tt,{type:"target",position:n,isConnectable:t}),e.label);st.displayName="OutputNode";const it=(0,n.memo)(st),lt=e=>{const t=({id:t,type:r,data:a,transform:s,xPos:i,yPos:l,selected:c,onClick:d,onMouseEnter:u,onMouseMove:m,onMouseLeave:p,onContextMenu:g,onNodeDragStart:f,onNodeDragStop:h,style:y,className:w,isDraggable:E,isSelectable:b,isConnectable:v,selectNodesOnDrag:S,sourcePosition:x,targetPosition:_,isHidden:N,isInitialized:C,snapToGrid:P,snapGrid:M,isDragging:$})=>{const k=V((e=>e.updateNodeDimensions)),B=V((e=>e.setSelectedElements)),T=V((e=>e.updateNodePosDiff)),O=V((e=>e.unsetNodesSelection)),I=(0,n.useRef)(null),L=(0,n.useMemo)((()=>({id:t,type:r,position:{x:i,y:l},data:a})),[t,r,i,l,a]),D=(0,n.useMemo)((()=>P?M:[1,1]),[P,M]),z=(0,n.useMemo)((()=>({zIndex:c?10:3,transform:`translate(${i}px,${l}px)`,pointerEvents:b||E||d?"all":"none",opacity:C?1:0,...y})),[c,i,l,b,E,d,C,y]),Y=(0,n.useMemo)((()=>{if(u&&!$)return e=>u(e,L)}),[u,$,L]),X=(0,n.useMemo)((()=>{if(m&&!$)return e=>m(e,L)}),[m,$,L]),A=(0,n.useMemo)((()=>{if(p&&!$)return e=>p(e,L)}),[p,$,L]),F=(0,n.useMemo)((()=>{if(g)return e=>g(e,L)}),[g,L]),j=(0,n.useCallback)((e=>{E||(b&&(O(),B({id:L.id,type:L.type})),d?.(e,L))}),[b,E,d,L]),Z=(0,n.useCallback)((e=>{f?.(e,L),S&&b&&(O(),B({id:L.id,type:L.type}))}),[L,S,b,f]),G=(0,n.useCallback)(((e,n)=>{T({id:t,diff:{x:n.deltaX,y:n.deltaY}})}),[t]),W=(0,n.useCallback)((e=>{if(!$)return b&&!S&&B({id:L.id,type:L.type}),void d?.(e,L);T({id:t,isDragging:!1}),h?.(e,L)}),[L,b,S,d,h,$]);if((0,n.useEffect)((()=>{if(I.current&&!N){k({id:t,nodeElement:I.current});const e=new H.ResizeObserver((()=>{I.current&&k({id:t,nodeElement:I.current})}));return e.observe(I.current),()=>{e&&I.current&&e.unobserve(I.current)}}}),[t,N]),N)return null;const U=R()(["react-flow__node",`react-flow__node-${r}`,w,{selected:c,selectable:b}]);return o().createElement(fe.DraggableCore,{onStart:Z,onDrag:G,onStop:W,scale:s[2],disabled:!E,cancel:".nodrag",nodeRef:I,grid:D},o().createElement("div",{className:U,ref:I,style:z,onMouseEnter:Y,onMouseMove:X,onMouseLeave:A,onContextMenu:F,onClick:j},o().createElement(Je,{value:t},o().createElement(e,{id:t,data:a,type:r,selected:c,isConnectable:v,sourcePosition:x,targetPosition:_}))))};return t.displayName="NodeWrapper",(0,n.memo)(t)},ct=({onSelectionChange:e})=>{const t=Y((e=>e.selectedElements));return(0,n.useEffect)((()=>{e(t)}),[t]),null},dt=(0,n.memo)((e=>o().createElement(ze,{...e,borderRadius:0}))),ut=(0,n.memo)((({sourceX:e,sourceY:t,targetX:n,targetY:r,label:a,labelStyle:s,labelShowBg:i,labelBgStyle:l,labelBgPadding:c,labelBgBorderRadius:d,style:u,arrowHeadType:m,markerEndId:p})=>{const g=Math.abs(r-t)/2,f=r<t?r+g:r-g,h=Math.abs(n-e)/2,y=n<e?n+h:n-h,w=xe(m,p),E=a?o().createElement(Se,{x:y,y:f,label:a,labelStyle:s,labelShowBg:i,labelBgStyle:l,labelBgPadding:c,labelBgBorderRadius:d}):null;return o().createElement(o().Fragment,null,o().createElement("path",{style:u,className:"react-flow__edge-path",d:`M ${e},${t}L ${n},${r}`,markerEnd:w}),E)})),mt=e=>{const t=({id:t,className:r,type:a,data:s,onClick:i,selected:l,animated:c,label:d,labelStyle:u,labelShowBg:m,labelBgStyle:p,labelBgPadding:g,labelBgBorderRadius:f,style:h,arrowHeadType:y,source:w,target:E,sourceX:b,sourceY:v,targetX:S,targetY:x,sourcePosition:_,targetPosition:N,elementsSelectable:C,markerEndId:P,isHidden:M})=>{const $=V((e=>e.setSelectedElements)),k=!C&&!i,B=R()(["react-flow__edge",`react-flow__edge-${a}`,r,{selected:l,animated:c,inactive:k}]),T=(0,n.useCallback)((e=>{if(C&&$({id:t,source:w,target:E}),i){const n={id:t,source:w,target:E,type:a};void 0!==s&&(n.data=s),i(e,n)}}),[C,t,w,E,a,s,i]);return M?null:o().createElement("g",{className:B,onClick:T},o().createElement(e,{id:t,source:w,target:E,selected:l,animated:c,label:d,labelStyle:u,labelShowBg:m,labelBgStyle:p,labelBgPadding:g,labelBgBorderRadius:f,data:s,style:h,arrowHeadType:y,sourceX:b,sourceY:v,targetX:S,targetY:x,sourcePosition:_,targetPosition:N,markerEndId:P}))};return t.displayName="EdgeWrapper",(0,n.memo)(t)},pt=({children:e})=>{const t=(0,D.useStore)()?.getState()?.reactFlowVersion;return t?o().createElement(o().Fragment,null,e):o().createElement(D.StoreProvider,{store:Q},e)};pt.displayName="ReactFlowWrapper";const gt=pt,ft={input:at,default:ot,output:it},ht={default:ke,straight:ut,step:dt,smoothstep:ze},yt=({elements:e=[],className:t,nodeTypes:r=ft,edgeTypes:a=ht,onElementClick:s,onLoad:i,onMove:l,onMoveStart:c,onMoveEnd:d,onElementsRemove:u,onConnect:m,onConnectStart:p,onConnectStop:g,onConnectEnd:f,onNodeMouseEnter:h,onNodeMouseMove:y,onNodeMouseLeave:w,onNodeContextMenu:E,onNodeDragStart:b,onNodeDragStop:v,onSelectionChange:S,onSelectionDragStart:x,onSelectionDrag:_,onSelectionDragStop:N,onSelectionContextMenu:C,connectionLineType:P=Me.Bezier,connectionLineStyle:M,connectionLineComponent:$,deleteKeyCode:k=8,selectionKeyCode:B=16,snapToGrid:T=!1,snapGrid:O=[15,15],onlyRenderVisibleNodes:I=!0,selectNodesOnDrag:L=!0,nodesDraggable:D,nodesConnectable:z,elementsSelectable:V,minZoom:Y,maxZoom:X,defaultZoom:H=1,defaultPosition:A=[0,0],translateExtent:F,arrowHeadColor:j="#b1b1b7",markerEndId:Z,zoomOnScroll:G=!0,zoomOnDoubleClick:W=!0,paneMoveable:U=!0,onPaneClick:q,onPaneScroll:K,onPaneContextMenu:J,children:Q,...ee})=>{const te=(0,n.useMemo)((()=>function(e){return{input:lt(e.input||at),default:lt(e.default||ot),output:lt(e.output||it),...Object.keys(e).filter((e=>!["input","default","output"].includes(e))).reduce(((t,n)=>(t[n]=lt(e[n]||ot),t)),{})}}(r)),[]),ne=(0,n.useMemo)((()=>function(e){return{default:mt(e.default||ke),straight:mt(e.bezier||ut),step:mt(e.step||dt),smoothstep:mt(e.step||ze),...Object.keys(e).filter((e=>!["default","bezier"].includes(e))).reduce(((t,n)=>(t[n]=mt(e[n]||ke),t)),{})}}(a)),[]),oe=R()(["react-flow",t]);return o().createElement("div",{...ee,className:oe},o().createElement(gt,null,o().createElement(We,{onLoad:i,onMove:l,onMoveStart:c,onMoveEnd:d,onElementClick:s,onNodeMouseEnter:h,onNodeMouseMove:y,onNodeMouseLeave:w,onNodeContextMenu:E,onNodeDragStart:b,onNodeDragStop:v,nodeTypes:te,edgeTypes:ne,connectionLineType:P,connectionLineStyle:M,connectionLineComponent:$,selectionKeyCode:B,onElementsRemove:u,deleteKeyCode:k,elements:e,onConnect:m,onConnectStart:p,onConnectStop:g,onConnectEnd:f,snapToGrid:T,snapGrid:O,onlyRenderVisibleNodes:I,nodesDraggable:D,nodesConnectable:z,elementsSelectable:V,selectNodesOnDrag:L,minZoom:Y,maxZoom:X,defaultZoom:H,defaultPosition:A,translateExtent:F,arrowHeadColor:j,markerEndId:Z,zoomOnScroll:G,zoomOnDoubleClick:W,paneMoveable:U,onPaneClick:q,onPaneScroll:K,onPaneContextMenu:J,onSelectionDragStart:x,onSelectionDrag:_,onSelectionDragStop:N,onSelectionContextMenu:C}),S&&o().createElement(ct,{onSelectionChange:S}),Q))};yt.displayName="ReactFlow";const wt=yt,Et=({x:e,y:t,width:n,height:r,style:a,color:s,strokeColor:i,className:l,borderRadius:c})=>{const{background:d,backgroundColor:u}=a||{},m=s||d||u;return o().createElement("rect",{className:R()(["react-flow__minimap-node",l]),x:e,y:t,rx:c,ry:c,width:n,height:r,fill:m,stroke:i,strokeWidth:2})};Et.displayName="MiniMapNode";const bt=(0,n.memo)(Et),vt=({style:e,className:t,nodeStrokeColor:n="#555",nodeColor:r="#fff",nodeClassName:a="",nodeBorderRadius:s=5,maskColor:i="#F0F2F3"})=>{const l=Y((e=>e.width)),c=Y((e=>e.height)),[d,u,m]=Y((e=>e.transform)),p=Y((e=>e.nodes)),g=R()(["react-flow__minimap",t]),f=e?.width||200,h=e?.height||150,y=r instanceof Function?r:()=>r,w=n instanceof Function?n:()=>n,E=a instanceof Function?a:()=>a,b=p&&p.length,v=se(p),S={x:-d/m,y:-u/m,width:l/m,height:c/m},x=b?(_=S,ae(oe(re(v),re(_)))):S;var _;const N=x.width/f,C=x.height/h,P=Math.max(N,C),M=P*f,$=P*h,k=5*P,B=x.x-(M-x.width)/2-k,T=x.y-($-x.height)/2-k,O=M+2*k,I=$+2*k;return o().createElement("svg",{width:f,height:h,viewBox:`${B} ${T} ${O} ${I}`,style:e,className:g},p.filter((e=>!e.isHidden)).map((e=>o().createElement(bt,{key:e.id,x:e.__rf.position.x,y:e.__rf.position.y,width:e.__rf.width,height:e.__rf.height,style:e.style,className:E(e),color:y(e),borderRadius:s,strokeColor:w(e)}))),o().createElement("path",{className:"react-flow__minimap-mask",d:`M${B-k},${T-k}h${O+2*k}v${I+2*k}h${-O-2*k}z\n        M${S.x},${S.y}h${S.width}v${S.height}h${-S.width}z`,fill:i,fillRule:"evenodd"}))};var St;function xt(){return xt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},xt.apply(this,arguments)}vt.displayName="MiniMap",(0,n.memo)(vt);const _t=function(e){return n.createElement("svg",xt({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},e),St||(St=n.createElement("path",{d:"M416 277.333H277.333V416h-42.666V277.333H96v-42.666h138.667V96h42.666v138.667H416v42.666z"})))};var Nt;function Ct(){return Ct=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},Ct.apply(this,arguments)}const Pt=function(e){return n.createElement("svg",Ct({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},e),Nt||(Nt=n.createElement("path",{d:"M96 235h320v42H96z"})))};var Mt;function $t(){return $t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},$t.apply(this,arguments)}const kt=function(e){return n.createElement("svg",$t({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},e),Mt||(Mt=n.createElement("path",{d:"M96 124.2c0-6.9 5.2-12.2 12.2-12.2H176V64h-66.8C75.7 64 48 90.7 48 124.2V192h48v-67.8zM403.6 64H336v48h67.2c6.9 0 12.8 5.2 12.8 12.2V192h48v-67.8c0-33.5-27-60.2-60.4-60.2zM416 386.8c0 6.9-5.2 12.2-12.2 12.2H336v49h67.8c33.5 0 60.2-27.7 60.2-61.2V320h-48v66.8zM108.2 399c-6.9 0-12.2-5.2-12.2-12.2V320H48v66.8c0 33.5 27.7 61.2 61.2 61.2H176v-49h-67.8z"})))};var Bt;function Tt(){return Tt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},Tt.apply(this,arguments)}const Ot=function(e){return n.createElement("svg",Tt({xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 512 512"},e),Bt||(Bt=n.createElement("path",{d:"M376 186h-20v-40c0-55-45-100-100-100S156 91 156 146v40h-20c-22.002 0-40 17.998-40 40v200c0 22.002 17.998 40 40 40h240c22.002 0 40-17.998 40-40V226c0-22.002-17.998-40-40-40zM256 368c-22.002 0-40-17.998-40-40s17.998-40 40-40 40 17.998 40 40-17.998 40-40 40zm62.002-182H193.998v-40c0-34.004 28.003-62.002 62.002-62.002 34.004 0 62.002 27.998 62.002 62.002v40z"})))};var It;function Lt(){return Lt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},Lt.apply(this,arguments)}const Rt=function(e){return n.createElement("svg",Lt({viewBox:"0 0 512 512",xmlns:"http://www.w3.org/2000/svg"},e),It||(It=n.createElement("path",{d:"M376 187h-20v-40c0-55-45-100-100-100-54.002 23.996-17.999 27.998 4 31.998s58.002 33.998 58.002 68.002H318v40H136c-22.002 0-40 17.998-40 40v200c0 22.002 17.998 40 40 40h240c22.002 0 40-17.998 40-40V227c0-22.002-17.998-40-40-40zM256 369c-22.002 0-40-17.998-40-40s17.998-40 40-40 40 17.998 40 40-17.998 40-40 40z"})))},Dt=({style:e,showZoom:t=!0,showFitView:n=!0,showInteractive:r=!0,onZoomIn:a,onZoomOut:s,onFitView:i,onInteractiveChange:l,className:c})=>{const d=V((e=>e.setInteractive)),u=V((e=>e.fitView)),m=V((e=>e.zoomIn)),p=V((e=>e.zoomOut)),g=Y((e=>e.nodesDraggable&&e.nodesConnectable&&e.elementsSelectable)),f=R()(["react-flow__controls",c]);return o().createElement("div",{className:f,style:e},t&&o().createElement(o().Fragment,null,o().createElement("div",{className:"react-flow__controls-button react-flow__controls-zoomin",onClick:()=>{m(),a&&a()}},o().createElement(_t,null)),o().createElement("div",{className:"react-flow__controls-button react-flow__controls-zoomout",onClick:()=>{p(),s&&s()}},o().createElement(Pt,null))),n&&o().createElement("div",{className:"react-flow__controls-button react-flow__controls-fitview",onClick:()=>{u({padding:.1}),i&&i()}},o().createElement(kt,null)),r&&o().createElement("div",{className:"react-flow__controls-button react-flow__controls-interactive",onClick:()=>{d(!g),l&&l(!g)}},g?o().createElement(Rt,null):o().createElement(Ot,null)))};Dt.displayName="Controls",(0,n.memo)(Dt);const zt={[Pe.Dots]:"#81818a",[Pe.Lines]:"#eee"},Vt=({variant:e=Pe.Dots,gap:t=15,size:r=.5,color:a,style:s,className:i})=>{const[l,c,d]=Y((e=>e.transform)),u=R()(["react-flow__background",i]),m=t*d,p=l%m,g=c%m,f=(0,n.useMemo)((()=>{const t=e===Pe.Lines,n=a||zt[e],o=t?((e,t,n)=>`<path stroke="${n}" strokeWidth="${t}" d="M0 0 V${e} M0 0 H${e}" />`)(m,r,n):((e,t)=>`<circle cx="${e}" cy="${e}" r="${e}" fill="${t}" />`)(r,n);return encodeURIComponent(`<svg width="${m}" height="${m}" xmlns='http://www.w3.org/2000/svg'>${o}</svg>`)}),[e,m,r,a]);return o().createElement("div",{className:u,style:{...s,backgroundImage:`url("data:image/svg+xml;utf8,${f}")`,backgroundPosition:`${p}px ${g}px`}})};Vt.displayName="Background",(0,n.memo)(Vt);const Yt=wt;function Xt({id:e,sourceX:t,sourceY:n,targetX:r,targetY:a,sourcePosition:s,targetPosition:i,style:l={},data:c,markerEndId:d}){const u=$e({sourceX:t,sourceY:n,sourcePosition:s,targetX:r-3,targetY:a,targetPosition:i}),m=xe(Ce.ArrowClosed,d);return o().createElement("path",{id:e,style:l,className:"react-flow__edge-path path-default",d:u,markerEnd:m})}const Ht=require("react-icons/fa"),At=i().div`
		display: flex;
		margin-top: 2px;
		margin-left: 4px;
		align-items: center;
	`,Ft=i().div`
		display: flex;
		margin-top: 2px;
		margin-right: 4px;
		align-items: center;
	`,jt=i().div`
		padding: 0 5px;
		flex-grow: 1;
	`;function Zt({type:e}){return e==g.SOURCE?o().createElement(At,{"data-rh":"Default: Allow All, not a part of NetworkPolicy","data-rh-at":"right"},o().createElement(jt,null,"Allow All"),o().createElement("div",null,o().createElement(Ht.FaQuestion,{style:{color:"rgb(255,192,100)"}}))):o().createElement(Ft,{"data-rh":"Default: Allow All, not a part of NetworkPolicy","data-rh-at":"left"},o().createElement("div",null,o().createElement(Ht.FaQuestion,{style:{color:"rgb(255,192,100)"}})),o().createElement(jt,null,"Allow All"))}const Gt=i().div`
		display: flex;
		margin-top: 2px;
		margin-left: 4px;
		align-items: center;
	`,Wt=i().div`
		display: flex;
		margin-top: 2px;
		margin-right: 4px;
		align-items: center;
	`,Ut=i().div`
		padding: 0 5px;
		flex-grow: 1;
	`;function qt({port:e}){return e.type==g.SOURCE?o().createElement(Gt,{"data-rh":"Deny Out","data-rh-at":"right"},o().createElement(Ut,null,e.name),o().createElement("div",null,o().createElement(Ht.FaBan,{style:{color:"rgb(255,100, 0)"}}))):o().createElement(Wt,{"data-rh":"Deny In","data-rh-at":"left"},o().createElement("div",null,o().createElement(Ht.FaBan,{style:{color:"rgb(255,100, 0)"}})),o().createElement(Ut,null,e.name))}i().div`
		display: flex;
		margin-top: 2px;
		margin-right: 4px;
		align-items: center;
	`;const Kt=i().div`
		padding: 0 5px;
		flex-grow: 1;
	`;function Jt({port:e,handleClasses:t}){return e.deny?o().createElement(qt,{port:e}):e.type==g.SOURCE?o().createElement(rn,null,o().createElement(Kt,null,e.name),o().createElement("div",null,o().createElement(tt,{id:e.id,className:t,type:"source",position:Ne.Right,isValidConnection:e=>e.sourceNodeId!==e.targetNodeId&&e.toTarget}))):o().createElement(rn,null,o().createElement("div",null,o().createElement(tt,{id:e.id,className:t,type:"target",position:Ne.Left,isValidConnection:e=>e.sourceNodeId!==e.targetNodeId&&!e.toTarget})),o().createElement(Kt,null,e.name))}const Qt=i().div`
  background: rgba(0, 0, 0, 0.7);
  display: flex;
  white-space: nowrap;
  justify-items: center;
`,en=i().div`
  background: rgba(0, 0, 0, 0.4);
  white-space: nowrap;
  padding: 5px 5px;
`,tn=i().div`
  flex-grow: 1;
  padding: 5px 5px;
`,nn=i().div`
  display: flex;
  background-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.2));
`,on=i().div`
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  &:first-of-type {
    margin-right: 10px;
  }
  &:only-child {
    margin-right: 0px;
  }
`,rn=i().div`
  display: flex;
  margin-top: 1px;
  align-items: center;
`,an=(i().div`
  display: flex;
  margin-top: 2px;
  margin-left: 4px;
  align-items: center;
`,i().div`
  display: flex;
  margin-top: 2px;
  margin-right: 4px;
  align-items: center;
`,i().div`
  padding: 0 5px;
  flex-grow: 1;
`,(0,n.memo)((({data:e,id:t})=>{const n=Y((e=>e.connectionPending)),r=Y((e=>e.connectionOnlyNodeId)),a=e.ports.filter((e=>e.type===g.TARGET)),s=e.ports.filter((e=>e.type===g.SOURCE)),i=R()(["port",{"react-flow__handle-connecting":n&&r!==t}]);return o().createElement("div",{style:{backgroundColor:e.isPartOfNetworkPolicy?"rgb(192,255,0)":""}},o().createElement(Qt,null,o().createElement(tn,null,e.name)),e.matchingPods.length>0&&o().createElement(en,null,o().createElement("p",null,"Pods:"),e.matchingPods.map((e=>o().createElement("p",{key:e.metadata.name},e.metadata.name)))),o().createElement(nn,null,o().createElement(on,null,0===a.length&&e.isPartOfNetworkPolicy&&o().createElement(Zt,{type:g.TARGET}),a.map((e=>o().createElement(Jt,{key:e.id,port:e,handleClasses:i})))),o().createElement(on,null,0===s.length&&e.isPartOfNetworkPolicy&&o().createElement(Zt,{type:g.SOURCE}),s.map((e=>o().createElement(Jt,{key:e.id,port:e,handleClasses:i}))))))})));function sn({elements:e}){const t={default:an,input:an,output:an},n={default:Xt};return o().createElement(Yt,{elements:e,nodeTypes:t,edgeTypes:n,onLoad:e=>e.fitView()})}require("react-hint/css/index.css");class ln{kind;apiVersion;metadata;static createFrom(e={}){return new ln(e)}constructor(e={}){"string"==typeof e&&(e=JSON.parse(e)),this.kind=e.kind,this.apiVersion=e.apiVersion,this.metadata=this.convertValues(e.metadata,E)}convertValues(e,t,n=!1){if(!e)return e;if(e.slice)return e.map((e=>this.convertValues(e,t)));if("object"==typeof e){if(n){for(const n of Object.keys(e))e[n]=new t(e[n]);return e}return new t(e)}return e}}class cn extends ln{static createFrom(e={}){return new cn(e)}}class dn extends ln{static createFrom(e={}){return new dn(e)}}const un=a()(o());function mn({networkPolicy:e,style:t,canvasStyle:n,pods:r,namespaces:a}){let s,i="";try{const t=function(e){try{return new $(JSON.stringify(u.load(e,{})))}catch(e){console.error(e)}}(e);t||(i="Error parsing NetworkPolicy manifest!");let n=[];r&&(n=k(r,cn));let o=[];a&&(o=k(a,dn)),t&&(s=O(t,n,o))}catch(e){i="Can not visualize NetworkPolicy!",console.error(e)}return o().createElement("div",{style:t},o().createElement(c,{text:i}),""===i&&o().createElement(o().Fragment,null,o().createElement(un,{autoPosition:!0,events:!0}),o().createElement("div",{id:"canvas",style:n},o().createElement(sn,{elements:s}))))}return t})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,